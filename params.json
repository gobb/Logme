{"name":"Logme","body":"## What Is It?\r\n\r\n**Logme** is a full-featured logging framework for PHP 5.4+.\r\n\r\nTraditional PHP logging libraries have used `static` and/or Singleton\r\nimplementations to shoehorn logging functionality into globals with\r\nno regard for code testability. **Logme** avoids this pitfall and allows\r\ndevelopers to use Dependency Injection to implement logging functionality\r\nin their code.\r\n\r\n## Features\r\n\r\n### _Log Handler Chain_\r\n\r\n**Logme** uses a variation on the Chain of Responsiblity pattern to attach\r\nmultiple log handlers, giving the developer full control over what events\r\nare logged and to which destinations. Consider the needs of a typical web\r\napplication:\r\n\r\n> You wish to write low-priority notices or warnings to a simple log file\r\nbut direct more severe log events like uncaught exceptions or critical\r\nsystem failures to a database or REST API for appropriate handling and\r\nnotification.\r\n\r\n**Logme** turns this kind of complex logging into a single orthogonal method\r\ncall.\r\n\r\n### _Custom Filters_\r\n\r\nHandlers can implement fully-customizable filters for fine-grained control\r\nover which events are actually logged.\r\n\r\n### _Log Output Formatting_\r\n\r\nFormatter objects expose a standardized interface for formatting log values.\r\n\r\n### _Extensible Built-in Handlers_\r\n\r\n**Logme** comes packaged with several built-in handlers for logging to files,\r\ndatabase resources, web servers and the console. More importantly, **Logme**\r\nmakes creating your own custom handlers a triviality.\r\n\r\n### _100% Unit-Tested and Fully Documented_\r\n\r\nThe bullet-point pretty much sums it up.\r\n\r\n## Examples and Documentation\r\nCheckout thorough [examples](https://github.com/rdlowrey/Logme/tree/master/examples) on our github page or the API documentation (coming soon).","tagline":"A PHP 5.4 Logging Framework","google":"UA-31625214-1","note":"Don't delete this file! It's used internally to help with page regeneration."}